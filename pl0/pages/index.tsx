import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import * as core from '../core/index';
import { useState } from 'react';
import { DataModel, InstructionStepParameters } from '../core/model';
import { InitModel } from '../core/operations';

const Home: NextPage = () => {
    const [model, setModel] = useState<DataModel | null>(null);
    const [models, setModels] = useState<DataModel[]>([]);

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next appGenerated by create next appGenerated by create next appGenerated by create next appGenerated by create next appGenerated by create next appGenerated by create next appGenerated by create next appGenerated by create next appGenerated by create next appGenerated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}></h1>

                {model == null && (
                    <>
                        <p>Simulace PL/0 nebyla zahájena</p>{' '}
                        <button
                            onClick={() => {
                                const m = InitModel(1024 * 512, 5000);
                                models.push(JSON.parse(JSON.stringify(m)));
                                setModel({ ...m });
                            }}
                        >
                            Zahájit
                        </button>
                    </>
                )}
                {model && (
                    <>
                        <p className={styles.description}>
                            PC: {model.pc} <br />
                        </p>

                        <button
                            onClick={() => {
                                models.push(JSON.parse(JSON.stringify(model)));
                                try {
                                    const pars: InstructionStepParameters = {
                                        model,
                                        instructions: [],
                                        input: '',
                                    };
                                    const result = core.Operations.NextStep(pars);
                                } catch (e) {
                                    alert((e as Error).message);
                                }

                                setModel({ ...model });
                            }}
                        >
                            next step -&gt;
                        </button>
                        <button
                            disabled={models.length < 1}
                            onClick={() => {
                                setModel(models[models.length - 1]);
                                models.pop();
                            }}
                        >
                            back -&lt;
                        </button>
                    </>
                )}
            </main>

            <footer className={styles.footer}>
                <a
                    href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by{' '}
                    <span className={styles.logo}>
                        <Image
                            src="/vercel.svg"
                            alt="Vercel Logo"
                            width={72}
                            height={16}
                        />
                    </span>
                </a>
            </footer>
        </div>
    );
};

export default Home;
