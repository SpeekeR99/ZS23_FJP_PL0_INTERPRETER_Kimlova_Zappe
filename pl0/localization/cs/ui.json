{
    "title": "PL/0",
    "bntBack": "Krok zpět",
    "btnForward": "Krok vpřed",
    "btnPlay": "Spustit",
    "btnReset": "Obnovit",
    "headerInstructions": "Instrukce",
    "headerStack": "Zásobník",
    "headerHeap": "Halda",
    "headerInput": "Vstup",
    "headerOutput": "Výstup",
    "headerWarnings": "Varování",

    "notAllocated": "Nealokováno",
    "notAllocatedMeta": "Nealokováno, obsahuje metadata bloku",
    "allocated": "Alokováno",
    "allocatedMeta": "Alokováno, obsahuje metadata bloku",

    "heapCellIndex": "Index",
    "heapCellValue": "Hodnota",

    "instructions": "Instrukce",
    "value": "Hodnota",
    "operation": "Operace",
    "address": "Adresa",
    "level": "Level",
    "parameter": "Parametr",
    "help_lit": "Přidá hodnotu na vrchol zásobníku",
    "help_int": "Zvýší nebo sníží ukazatel stack pointeru. Zvýšení nad již vytvořený stack vytváří 0. Nelze snížit ukazatel stack pointeru pod aktuální stack frame nebo pod -1.",
    "help_opr": "Vykoná operaci (logickou nebo aritmetickou). Instrukce se chová stejně jako referenční interpret (operace 1 - 13). Pokud operace používá dvě hodnoty ze zásobníku, první hodnota je ta s nižším indexem a druhá hodnota je ta na vrcholu zásobníku.",
    "help_opr2": "Dostupné operace:\n1 - Unární mínus\n2 - Sčítání\n3 - Odčítání\n4 - Násobení\n5 - Dělení\n6 - Modulo\n7 - Je liché\n8 - Rovno\n9 - Nerovno\n10 - Menší než\n11 - Více nebo rovno než\n12 - Více než\n13 - Menší nebo rovno než",
    "help_jmp": "Skočí na instrukci určenou adresou. Pokud by skok vedl na neexistující instrukci, vyvolá se výjimka.",
    "help_jmc": "Pokud je na vrcholu zásobníku 0, provede skok na instrukci určenou adresou. Pokud by skok vedl na neexistující instrukci, vyvolá se výjimka.",
    "help_lod": "Načte hodnotu z úrovně, adresy na zásobníku, a vloží ji na zásobník. Pokud je úroveň příliš vysoká (cílový rámec zásobníku by skončil pod prvním rámcem zásobníku), vyvolá se výjimka.",
    "help_sto": "Uloží hodnotu z vrcholu zásobníku na úroveň a adresu na zásobníku. Pokud je úroveň příliš vysoká (cílový rámec zásobníku by skončil pod prvním rámcem zásobníku), vyvolá se výjimka.",
    "help_cal": "Vytvoří nový rámec zásobníku se statickou bází (SB) na relativním indexu 0, dynamickou bází (DB) na relativním indexu 1 a programovým čítačem (PC) na relativním indexu 2.",
    "help_cal2": "Statická báze je nastavena na úroveň níže. Když je úroveň 0, statická báze je nastavena jako aktuální báze volajícího, a když je úroveň 1, statická báze je nastavena jako aktuální statická báze volajícího. V opačném případě je statická báze určena iterací přes statické báze rámců zásobníku pod volajícím.",
    "help_cal3": "Dynamická báze je nastavena jako aktuální báze volajícího. Programový čítač je nastaven jako následující instrukce k provedení (PC + 1).",
    "help_cal4": "Poté je proveden skok na instrukci určenou adresou. Ukazatel zásobníku musí být zvýšen pomocí instrukce INT (stejné jako u referenčního interpreteru).",
    "help_ret": "Nastaví programový čítač (PC) na hodnotu uloženou na indexu 2 rámce zásobníku. Nastaví ukazatel zásobníku na aktuální bázi - 1 (vrchol předchozího rámce zásobníku). Nastaví aktuální bázi na dynamickou bázi (DB) uloženou na indexu 1 rámce zásobníku.",
    "help_ret2": "Pokud je instrukce provedena, když je aktuální báze 0 (tj. první rámec zásobníku), program se ukončí.",
    "help_rea": "Načte jeden znak ze vstupního textového pole, převede ho na číslo a vloží ho na zásobník. Očekává se, že znak bude ve formátu ASCII (nebo rozšířené ASCII, tedy jednoduše 8 bytová hodnota). Pokud v poli vstupu není žádný znak nebo znak není ve formátu rozšířeného ASCII, vyvolá se výjimka.",
    "help_wri": "Zapíše hodnotu z vrcholu zásobníku do textového výstupního pole jako znak. Pokud hodnota není v rozmezí <0, 255>, vyvolá se výjimka.",
    "help_new": "Vezme hodnotu na vrcholu zásobníku jako počet buněk na haldě k alokaci. Alokuje takový počet buněk spojitě (v jednom souvislém bloku) a vloží adresu bloku na zásobník. Pokud nelze buňky alokovat, na zásobník je vložena hodnota -1 (např. nedostatek volných buněk, neplatná hodnota).",
    "help_del": "Vezme hodnotu na vrcholu zásobníku jako adresu bloku na haldě k dealokaci. Blok na haldě je dealokován celý. Při neúspěchu vyvolá výjimku.",
    "help_lda": "Vezme hodnotu na vrcholu zásobníku jako adresu buňky na haldě. Vloží hodnotu z buňky na haldě do zásobníku. Při neúspěchu vyvolá výjimku.",
    "help_sta": "Vezme hodnotu na vrcholu zásobníku jako hodnotu k uložení a hodnotu pod ní (SP - 1) jako adresu, na kterou se má uložit. Uloží hodnotu na adresu do haldy. Při neúspěchu vyvolá výjimku.",
    "help_pld": "V podstatě dynamická instrukce LOD, kde adresa je hodnota na vrcholu zásobníku a úroveň je hodnota pod ní (SP - 1). Vloží hodnotu z určené adresy a úrovně zásobníku na zásobník.",
    "help_pst": "V podstatě dynamická instrukce STO, kde adresa je hodnota na vrcholu zásobníku, úroveň je hodnota pod ní (SP - 1) a hodnota k uložení je na indexu SP - 2. Uloží určenou hodnotu na určenou adresu a úroveň zásobníku.",
    "help_itr": "Vezme dvě hodnoty z vrcholu zásobníku a chápe je jako dvě části desetinného čísla. Číslo pod vrcholem zásobníku (SP - 1) je celá část a číslo na vrcholu zásobníku je desetinná část. Vloží mantisu a exponent v desítkové soustavě na zásobník (mantisa * 10^exponent). Mantisa bude na vrcholu zásobníku a exponent pod ní.",
    "help_rti": "Vezme dvě hodnoty z vrcholu zásobníku a chápe je jako mantisu a exponent v desítkové soustavě. Číslo na vrcholu zásobníku je mantisa a číslo pod vrcholem zásobníku (SP - 1) je exponent. Vloží na zásobník dvě celá čísla, která lze chápat jako celou a desetinnou část desetinného čísla. Desetinná část bude na vrcholu zásobníku a celá část pod ní.",
    "help_rti2": "Parametr může být buď 0 nebo 1. Pokud je 1, číslo bude oříznuto o svou desetinnou část a pouze celá část bude vložena na zásobník. S parametrem nastaveným na 0 tato instrukce funguje jak bylo řečeno výše.",
    "help_opf": "Provádí operaci (logickou nebo aritmetickou). Instrukce se chová stejně jako referenční interpret (operace 1 - 13). Jedinný rozdíl mezi OPR a OPF je, že OPF používá desetinná čísla, takže operace bere čtyři hodnoty ze zásobníku (dvě pro každý operand - mantisa a exponent).",
    "instructionsParsingState": "Parsování instrukcí",
    "instructionsValidationState": "Validace instrukcí",
    "inputFileLoaded": "Soubor s instrukcemi úspěšně načten",
    "inputFileError": "Nepodařilo se zpracovat soubor s instrukcemi",
    "inputFileErrorNotText": "Nepodařilo se zpracovat soubor s instrukcemi. Nahráváte textový soubor?",
    "cannotsaveNoInstructions": "Nelze uložit, nebyly nalezeny žádné validní instrukce",
    "btnLoadInstructions": "Načíst/upravit instrukce",
    "instructionsModalHeader": "Načíst/upravit instrukce",
    "btnSave": "Uložit",
    "btnCancel": "Zrušit",

    "instructionsTableInstruction": "Instrukce",
    "instructionsTableLevel": "Level",
    "instructionsTablePar": "Par",
    "instructionsTableExplanation": "Vysvětlení",

    "stackSP": "SP",
    "stackBase": "Báze",
    "stackSPSeparator": "Ukazatel stack pointeru",

    "stackSB": "Statická báze volajícího",
    "stackDB": "Dynamická báze volajícího",
    "stackPC": "Program counter volajícího",

    "help": "Nápověda", 
    "ok": "Ok",
    
    "createdBy": "Vytvořili Lukáš Vlček a Vojtěch Bartička, vylepšili Vladimíra Kimlová a Dominik Zappe",
    "workInfo": "Semestrální práce z KIV/FJP, FAV ZČU 2021 - 2023"
}
